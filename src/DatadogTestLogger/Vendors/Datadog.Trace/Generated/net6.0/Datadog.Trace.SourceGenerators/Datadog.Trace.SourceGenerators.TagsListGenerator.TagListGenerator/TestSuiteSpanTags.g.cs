//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#if NET6_0_OR_GREATER
// <auto-generated/>
#nullable enable

using DatadogTestLogger.Vendors.Datadog.Trace.Processors;
using DatadogTestLogger.Vendors.Datadog.Trace.Tagging;
using System;

namespace DatadogTestLogger.Vendors.Datadog.Trace.Ci.Tagging
{
    partial class TestSuiteSpanTags
    {
        // SuiteBytes = MessagePack.Serialize("test.suite");
#if NETCOREAPP
        private static ReadOnlySpan<byte> SuiteBytes => new byte[] { 170, 116, 101, 115, 116, 46, 115, 117, 105, 116, 101 };
#else
        private static readonly byte[] SuiteBytes = new byte[] { 170, 116, 101, 115, 116, 46, 115, 117, 105, 116, 101 };
#endif

        public override string? GetTag(string key)
        {
            return key switch
            {
                "test.suite" => Suite,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "test.suite": 
                    Suite = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (Suite is not null)
            {
                processor.Process(new TagItem<string>("test.suite", Suite, SuiteBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (Suite is not null)
            {
                sb.Append("test.suite (tag):")
                  .Append(Suite)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}

#endif